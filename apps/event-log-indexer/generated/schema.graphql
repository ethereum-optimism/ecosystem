type Query {
  optimist(id: String!, timestamp: Int): Optimist
  optimists(timestamp: Int, where: OptimistFilter, orderBy: String, orderDirection: String, before: String, after: String, limit: Int): OptimistPage
}

type Optimist {
  id: String!
  chainId: Int!
  tokenId: BigInt!
  transactionHash: String!
  blockNumber: BigInt!
}

scalar BigInt

type OptimistPage {
  items: [Optimist!]
  pageInfo: PageInfo
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input OptimistFilter {
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  chainId: Int
  chainId_not: Int
  chainId_in: [Int]
  chainId_not_in: [Int]
  chainId_gt: Int
  chainId_lt: Int
  chainId_gte: Int
  chainId_lte: Int
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_in: [BigInt]
  tokenId_not_in: [BigInt]
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  transactionHash: String
  transactionHash_not: String
  transactionHash_in: [String]
  transactionHash_not_in: [String]
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_in: [BigInt]
  blockNumber_not_in: [BigInt]
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
}