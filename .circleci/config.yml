version: 2.1

orbs:
  nx: nrwl/nx@1.7.0
  utils: ethereum-optimism/circleci-utils@1.0.17

commands:
  prepare-snapshot:
    description: 'Prepare the snapshot name'
    steps:
      - run:
          name: Setup snapshot name
          command: |
            SNAPSHOT_NAME=${CIRCLE_BRANCH}
            echo "Will create snapshot using name $SNAPSHOT_NAME"
            echo "export SNAPSHOT_NAME=${SNAPSHOT_NAME}" >> "$BASH_ENV"
      - run:
          name: Prepare changeset version environment
          command: |
            echo "export GITHUB_TOKEN=${GITHUB_TOKEN_GOVERNANCE}" >> "$BASH_ENV"
      - run:
          name: Create snapshot versions
          command: pnpm release:version:snapshot

  setup:
    description: 'Setup Node.js environment with pnpm and nx'
    steps:
      - utils/checkout-with-mise # Install dependencies
      - run:
          name: Install dependencies
          environment:
            NPM_TOKEN: nada
          command: |
            pnpm i --frozen-lockfile
      - nx/set-shas
      - run:
          name: clean unstaged changes in case of previous failed runs
          command: |
            git clean -fd
      - run:
          name: Log nx base and head refs
          command: |
            echo "BASE: $NX_BASE"
            echo "HEAD: $NX_HEAD"
            echo "Changed files between BASE and HEAD:"
            git diff --name-only $NX_BASE $NX_HEAD
            echo "Available nx projects and their targets:"
            pnpm nx show projects --with-target test

  gcp-oidc-authenticate:
    description: 'Authenticate with GCP using a CircleCI OIDC token.'
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: 'Create OIDC credential configuration'
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: 'Authenticate with GCP using OIDC'
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"
jobs:
  publish-to-npm:
    docker:
      - image: cimg/node:20.11
    parameters:
      prepare-snapshot:
        type: boolean
        default: false
    steps:
      - setup
      - run:
          name: Build projects
          environment:
            NPM_TOKEN: nada
          command: pnpm nx run-many --target=build
      - run:
          name: Check NPM Token
          command: |
            if [ -z "${NPM_TOKEN}" ]; then
              echo "NPM_TOKEN is not set. Please set it in CircleCI project settings."
              exit 1
            fi
      - run:
          name: Configure NPM Token and Registry
          command: |
            npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"

      - run:
          name: Verify NPM Token
          command: npm whoami

      - when:
          condition:
            equal: [<< parameters.prepare-snapshot >>, true]
          steps:
            - prepare-snapshot

      - utils/changesets:
          createGithubReleases: false
          publish: 'pnpm release:publish'
          version: 'pnpm release:version'

  check:
    docker:
      - image: cimg/node:20.11
    steps:
      - setup
      - run:
          name: Run Build
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=build
      - run:
          name: Run TypeChecker
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=typecheck
      - run:
          name: Run Linters
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint
      - run:
          name: Run Tests
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=test

  docker-build:
    environment:
      DOCKER_BUILDKIT: 1
    docker:
      - image: cimg/base:2024.01
    parameters:
      docker_name:
        description: Docker image name
        type: string
      docker_tags:
        description: Docker image tags as csv
        type: string
      docker_file:
        description: Path to Dockerfile
        type: string
      docker_context:
        description: Docker build context
        type: string
      docker_target:
        description: Docker build target for multi-stage builds
        type: string
      registry:
        description: Docker registry
        type: string
        default: 'us-docker.pkg.dev'
      repo:
        description: Docker repo
        type: string
        default: 'oplabs-tools-artifacts/images'
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: mkdir -p /tmp/docker_images
      - run:
          name: Build
          command: |
            # Check to see if DOCKER_HUB_READ_ONLY_TOKEN is set (i.e. we are in repo) before attempting to use secrets.
            # Building should work without this read only login, but may get rate limited.
            if [[ -v DOCKER_HUB_READ_ONLY_TOKEN ]]; then
              echo "$DOCKER_HUB_READ_ONLY_TOKEN" | docker login -u "$DOCKER_HUB_READ_ONLY_USER" --password-stdin
            fi
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_TAGS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g" | sed -e "s|^|-t ${IMAGE_BASE}:|")
            TARGET_OPTION=""
            if [[ -n "<<parameters.docker_target>>" ]]; then
              TARGET_OPTION="--target <<parameters.docker_target>> --build-arg DOCKER_TARGET=<<parameters.docker_target>>"
            fi
            docker build \
              $TARGET_OPTION \
              $(echo -ne $DOCKER_TAGS | tr '\n' ' ') \
              -f <<parameters.docker_file>> \
              <<parameters.docker_context>>
      - run:
          name: Save
          command: |
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_LABELS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g")
            echo -ne $DOCKER_LABELS | tr ' ' '\n' | xargs -I {} docker save -o /tmp/docker_images/<<parameters.docker_name>>_{}.tar $IMAGE_BASE:{}
      - persist_to_workspace:
          root: /tmp/docker_images
          paths:
            - '.'

  docker-publish:
    parameters:
      docker_name:
        description: Docker image name
        type: string
      docker_tags:
        description: Docker image tags as csv
        type: string
      registry:
        description: Docker registry
        type: string
        default: 'us-docker.pkg.dev'
      repo:
        description: Docker repo
        type: string
        default: 'oplabs-tools-artifacts/images'
    machine:
      image: ubuntu-2204:2024.01.1
    steps:
      - attach_workspace:
          at: /tmp/docker_images
      - run:
          name: Docker load
          command: |
            DOCKER_LABELS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g")
            echo -ne $DOCKER_LABELS | tr ' ' '\n' | xargs -I {} docker load -i /tmp/docker_images/<<parameters.docker_name>>_{}.tar
      - gcp-oidc-authenticate
      # Below is CircleCI recommended way of specifying nameservers on an Ubuntu box:
      # https://support.circleci.com/hc/en-us/articles/7323511028251-How-to-set-custom-DNS-on-Ubuntu-based-images-using-netplan
      - run: sudo sed -i '13 i \ \ \ \ \ \ \ \ \ \ \ \ nameservers:' /etc/netplan/50-cloud-init.yaml
      - run: sudo sed -i '14 i \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ addresses:' /etc/netplan/50-cloud-init.yaml
      - run: sudo sed -i "s/addresses:/ addresses":" [8.8.8.8, 8.8.4.4] /g" /etc/netplan/50-cloud-init.yaml
      - run: cat /etc/netplan/50-cloud-init.yaml
      - run: sudo netplan apply
      - run:
          name: Publish
          command: |
            gcloud auth configure-docker <<parameters.registry>>
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_TAGS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g" | sed -e "s|^|${IMAGE_BASE}:|")
            echo -ne $DOCKER_TAGS | tr ' ' '\n' | xargs -L1 docker push

workflows:
  release:
    jobs:
      - publish-to-npm:
          name: Publish new versions
          context:
            - circleci-repo-ecosystem # for GITHUB_TOKEN_GOVERNANCE && NPM_TOKEN
          filters:
            branches:
              only: main

      - publish-to-npm:
          name: Publish snapshot versions
          prepare-snapshot: true
          context:
            - circleci-repo-ecosystem # for GITHUB_TOKEN_GOVERNANCE && NPM_TOKEN
          filters:
            branches:
              only: main
  check-workflow:
    jobs:
      - check
  build-and-publish-ponder-interop:
    when:
      and:
        - equal: [<<pipeline.git.branch>>, main]
    jobs:
      - docker-build:
          name: ponder-interop-docker-build
          docker_file: ./Dockerfile
          docker_name: ecosystem-ponder-interop
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          docker_context: .
          docker_target: ponder-interop
      - docker-publish:
          name: ponder-interop-docker-publish
          docker_name: ecosystem-ponder-interop
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          context:
            - oplabs-gcr
          requires:
            - ponder-interop-docker-build
  build-and-publish-autorelayer-interop:
    when:
      and:
        - equal: [<<pipeline.git.branch>>, main]
    jobs:
      - docker-build:
          name: autorelayer-interop-docker-build
          docker_file: ./Dockerfile
          docker_name: ecosystem-autorelayer-interop
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          docker_context: .
          docker_target: autorelayer-interop
      - docker-publish:
          name: autorelayer-interop-docker-publish
          docker_name: ecosystem-autorelayer-interop
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          context:
            - oplabs-gcr
          requires:
            - autorelayer-interop-docker-build

  build-and-publish-sponsored-sender:
    when:
      and:
        - equal: [<<pipeline.git.branch>>, main]
    jobs:
      - docker-build:
          name: sponsored-sender-docker-build
          docker_file: ./Dockerfile
          docker_name: ecosystem-sponsored-sender
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          docker_context: .
          docker_target: sponsored-sender
      - docker-publish:
          name: sponsored-sender-docker-publish
          docker_name: ecosystem-sponsored-sender
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          context:
            - oplabs-gcr
          requires:
            - sponsored-sender-docker-build
